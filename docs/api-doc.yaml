openapi: 3.0.0
info:
  title: MoveSmart Bus Data Manager API
  description: API para la gesti√≥n de rutas y paradas de autobuses en MoveSmart
  version: 1.0.0
tags:
  - name: Route
  - name: Stop
  - name: Vehicle
  - name: VehicleHistory

paths:
  /api/v1/stops:
    post:
      tags:
        - Stop
      summary: Create a new stop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopRequest'
      responses:
        '201':
          description: Created stop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '409':
          description: Stop with ID {stopId} already exists
        '400':
          description: Bad Request

    get:
      tags:
        - Stop
      summary: Get all stops
      responses:
        '200':
          description: Stop list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stop'

  /api/v1/stops/{stopId}:
    get:
      tags:
        - Stop
      summary: Get a stop by ID
      parameters:
        - in: path
          name: stopId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '404':
          description: Stop with ID {stopId} does not exist

    put:
      tags:
        - Stop
      summary: Update a stop by ID
      parameters:
        - in: path
          name: stopId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopRequest'
      responses:
        '201':
          description: Stop updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '404':
          description: Stop with ID {stopId} does not exist
        '400':
          description: Bad Request

    delete:
      tags:
        - Stop
      summary: Delete a stop by ID
      parameters:
        - in: path
          name: stopId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted stop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '404':
          description: Stop with ID {stopId} does not exist

  /api/v1/{stopId}/routes:
    patch:
      tags:
        - Stop
      summary: Remove a stop ID from all routes
      parameters:
        - in: path
          name: stopId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop ID removed from routes
          content:
            application/json:
              schema:
                type: string
                example: "Stop with id {stopId} removed from {n} routes"
        '404':
          description: Stop with ID {stopId} does not exist
        '400':
          description: Bad Request


  /api/v1/stops/{stopId}/enable:
    patch:
      tags:
        - Stop
      summary: Enable a stop by ID
      parameters:
        - in: path
          name: stopId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          description: Stop with ID {stopId} does not exist
        '409':
          description: Stop with ID {stopId} is already enabled

  /api/v1/stops/{stopId}/disable:
    patch:
      tags:
        - Stop
      summary: Disable a stop by ID
      parameters:
        - in: path
          name: stopId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          description: Stop with ID {stopId} does not exist
        '409':
          description: Stop with ID {stopId} is already disabled

  /api/v1/routes:
    post:
      tags:
        - Route
      summary: Create a new route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
          description: Created route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: Bad Request

    get:
      tags:
        - Route
      summary: Get all routes
      responses:
        '200':
          description: List of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'

  /api/v1/routes/{routeId}:
    get:
      tags:
        - Route
      summary: Get a route by ID
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Route found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Route with ID {routeId} does not exist

    put:
      tags:
        - Route
      summary: Update a route by ID
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        '200':
          description: Route updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Route with ID {routeId} does not exist
        '400':
          description: Bad Request

    delete:
      tags:
        - Route
      summary: Delete a route by ID
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Route deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Route with ID {routeId} does not exist

  /api/v1/routes/{routeId}/enable:
    patch:
      tags:
        - Route
      summary: Enable a route by ID
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Route enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: Route with ID {routeId} does not exist
        '409':
          description: Route with ID {routeId} is already enabled

  /api/v1/routes/{routeId}/disable:
    patch:
      tags:
        - Route
      summary: Disable a route by ID
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Route disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: Route with ID {routeId} does not exist
        '409':
          description: Route with ID {routeId} is already disabled

  /api/v1/routes/{routeId}/stops:
    get:
      tags:
        - Route
      summary: Get the stop IDs of a route by its ID
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of stop IDs associated with the specified route
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Route with ID {routeId} does not exist
        '400':
          description: Bad Request

    patch:
      tags:
        - Route
      summary: Update the list of stops for a route
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteStopsRequest'
      responses:
        '200':
          description: Updated route object with new stops
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          description: Invalid request format
        '404':
          description: One or more stops do not exist, or the route ID was not found

  /api/v1/vehicle:
    post:
      tags:
        - Vehicle
      summary: Create a new vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleRequest'
      responses:
        '201':
          description: Created vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '409':
          description: Vehicle with ID {plateNumber} already exists
        '400':
          description: Bad Request

  /api/v1/vehicle/{plateNumber}:
    get:
      tags:
        - Vehicle
      summary: Get a vehicle by ID
      parameters:
        - in: path
          name: plateNumber
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Vehicle found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Vehicle with ID {plateNumber} does not exist

    put:
      tags:
        - Vehicle
      summary: Update a vehicle by ID
      parameters:
        - in: path
          name: plateNumber
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleRequest'
      responses:
        '201':
          description: Vehicle updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Vehicle with ID {plateNumber} does not exist
        '400':
          description: Bad Request

    delete:
      tags:
        - Vehicle
      summary: Delete a vehicle by ID
      parameters:
        - in: path
          name: plateNumber
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '404':
          description: Vehicle with ID {plateNumber} does not exist

  /api/v1/vehicle/{plateNumber}/status:
    patch:
      tags:
        - Vehicle
      summary: Change the status of a vehicle
      parameters:
        - in: path
          name: plateNumber
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeStatusVehicleRequest'
      responses:
        '200':
          description: Vehicle updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

        '404':
          description: Vehicle not found.
        '409':
          description: Vehicle is alrrady {the requested status}.
        '400':
          description: Invalid request format.

  /api/v1/vehicleHistory:
    post:
      tags:
        - VehicleHistory
      summary: Create a new vehicleHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleHistoryRequest'
      responses:
        '201':
          description: Created vehicleHistory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleHistory'
        '409':
          description: VehicleHistory with ID {id} already exists
        '400':
          description: Bad Request

components:
  schemas:
    Stop:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        location:
          $ref: '#/components/schemas/Coordinates'

    StopRequest:
      type: object
      properties:
        name:
          type: string
        location:
          $ref: '#/components/schemas/Coordinates'

    Route:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        stopIds:
          type: array
          items:
            type: string
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        status:
          type: string
          enum: [Enabled, Disabled]

    RouteResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        stopIds:
          type: array
          items:
            type: string
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        status:
          type: string
          enum: [Enabled, Disabled]

    UpdateRouteRequest:
      type: object
      properties:
        name:
          type: string
        stopIds:
          type: array
          items:
            type: string
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'

    Coordinates:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

    Schedule:
      type: object
      properties:
        typeOfDay:
          type: string
          enum: [WEEKDAY, WEEKEND]
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        frequencyInMinutes:
          type: integer

    UpdateRouteStopsRequest:
      type: object
      properties:
        stopIds:
          type: array
          description: List of stop IDs to update in the route
          items:
            type: string
      required:
        - stopIds

    Vehicle:
      type: object
      properties:
        plateNumber:
          type: string
        capacity:
          type: integer
        type:
          type: string
        location:
          $ref: '#/components/schemas/Coordinates'
          description: Current coordinates of the vehicle
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        speed:
          type: number
          format: double
        direction:
          type: string
        vehicleHistory:
          type: array
          items:
            type: string
        status:
          type: string
          description: Current status of the vehicle
          enum: [InService, OutOfService, InMaintenance]

    Event:
      type: object
      properties:
        time:
          type: string
          format: date-time
        details:
          type: string
        maintenance:
          type: boolean
        notification:
          type: string

    VehicleRequest:
      type: object
      properties:
        plateNumber:
          type: string
          pattern: '^\\d{4}[A-Z]{3}$'
        capacity:
          type: integer
        type:
          type: string
        location:
          $ref: '#/components/schemas/Coordinates'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        speed:
          type: number
          format: double
        direction:
          type: string
        vehicleHistory:
          type: array
          items:
            type: string

    ChangeStatusVehicleRequest:
      type: object
      properties:
        plateNumber:
          type: string
        status:
          $ref: '#/components/schemas/VehicleStatus'
    VehicleStatus:
      type: string
      enum: [InService, OutOfService, InMaintenance]

    VehicleHistory:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the vehicle history entry
        routeId:
          type: string
          description: ID of the route associated with this history
        vehicleId:
          type: string
          description: ID of the vehicle associated with this history
        driverId:
          type: string
          description: ID of the driver associated with this history
        startTime:
          type: string
          format: date-time
          description: Start time of the route for the vehicle
        endTime:
          type: string
          format: date-time
          description: End time of the route for the vehicle
          nullable: true

    VehicleHistoryRequest:
      type: object
      properties:
        routeId:
          type: string
          description: ID of the route associated with this history
        vehicleId:
          type: string
          description: ID of the vehicle associated with this history
        driverId:
          type: string
          description: ID of the driver associated with this history
        startTime:
          type: string
          format: date-time
          description: Start time of the route for the vehicle
      required:
        - routeId
        - vehicleId
        - driverId
        - startTime